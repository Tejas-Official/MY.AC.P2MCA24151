//Index.js:

const express = require('express');
const axios = require('axios');

const app = express();
const PORT = 9876;
const MAX_SIZE = 10;

let recentNumbers = [];

const numberSources = {
  p: 'http://20.244.56.144/evaluation-service/primes',
  f: 'http://20.244.56.144/evaluation-service/fibo',
  e: 'http://20.244.56.144/evaluation-service/even',
  r: 'http://20.244.56.144/evaluation-service/rand',
};


app.get('/numbers/:type', async (req, res) => {
  const type = req.params.type;


  if (!numberSources[type]) {
    return res.status(400).json({ error: 'Unsupported type. Try one of: p, f, e, r' });
  }

  const targetURL = numberSources[type];
  const beforeUpdate = [...recentNumbers]; 

  try {
    const { data } = await axios.get(targetURL, { timeout: 500 });
    const incoming = data.numbers || [];

    incoming.forEach(num => {
      if (!recentNumbers.includes(num)) {
        if (recentNumbers.length >= MAX_SIZE) {
          recentNumbers.shift(); 
        }
        recentNumbers.push(num);
      }
    });

    const average = recentNumbers.reduce((sum, val) => sum + val, 0) / (recentNumbers.length || 1);

    return res.json({
      previousWindow: beforeUpdate,
      currentWindow: [...recentNumbers],
      numbersReceived: incoming,
      average: parseFloat(average.toFixed(2))
    });
  } catch (err) {
    console.warn('API call failed or timed out:', err.message);
    const fallbackAvg = recentNumbers.reduce((sum, val) => sum + val, 0) / (recentNumbers.length || 1);

    return res.json({
      previousWindow: beforeUpdate,
      currentWindow: [...recentNumbers],
      numbersReceived: [],
      average: parseFloat(fallbackAvg.toFixed(2))
    });
  }
});


app.listen(PORT, () => {
  console.log(`ðŸŸ¢ Service is live at: http://localhost:${PORT}`);
});

